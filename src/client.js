// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, EventEmitter, PlugAPI, Room, SockJS, apiId, client, encoder, http, logger,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SockJS = require('./sockjs-client');

  http = require('http');

  EventEmitter = require('events').EventEmitter;

  Encoder = require('node-html-encoder').Encoder;

  Room = require('./room');

  encoder = new Encoder('entity');

  http.OutgoingMessage.prototype.__renderHeaders = http.OutgoingMessage.prototype._renderHeaders;

  client = null;

  apiId = 0;

  logger = {
    log: function() {
      return console.log.apply(console, arguments);
    }
  };

  PlugAPI = (function(_super) {

    __extends(PlugAPI, _super);

    function PlugAPI(key) {
      this.key = key;
      this.getRoomScore = __bind(this.getRoomScore, this);

      this.getMedia = __bind(this.getMedia, this);

      this.getAmbassadors = __bind(this.getAmbassadors, this);

      this.getWaitList = __bind(this.getWaitList, this);

      this.getSelf = __bind(this.getSelf, this);

      this.getHost = __bind(this.getHost, this);

      this.getAdmins = __bind(this.getAdmins, this);

      this.getStaff = __bind(this.getStaff, this);

      this.getDJs = __bind(this.getDJs, this);

      this.getAudience = __bind(this.getAudience, this);

      this.getUser = __bind(this.getUser, this);

      this.getUsers = __bind(this.getUsers, this);

      this.moderateKickUser = __bind(this.moderateKickUser, this);

      this.moderateRemoveDJ = __bind(this.moderateRemoveDJ, this);

      this.initRoom = __bind(this.initRoom, this);

      this.joinRoom = __bind(this.joinRoom, this);

      this.dataHandler = __bind(this.dataHandler, this);

      if (!key) {
        throw new Error("You must pass the authentication cookie into the PlugAPI object to connect correctly");
      }
      this.rpcHandlers = {};
      this.room = new Room();
    }

    PlugAPI.prototype.setLogObject = function(c) {
      return logger = c;
    };

    PlugAPI.prototype.connect = function(room) {
      var cookie,
        _this = this;
      cookie = this.key;
      http.OutgoingMessage.prototype._renderHeaders = function() {
        if (this._header) {
          throw new Error('Can\'t render headers after they are sent to the client.');
        }
        this.setHeader('Cookie', 'usr="' + cookie + '\"');
        return this.__renderHeaders();
      };
      client = SockJS.create('https://sjs.plug.dj:443/plug');
      client.send = function(data) {
        return this.write(JSON.stringify(data));
      };
      client.on('error', function(e) {
        return _this.emit('error', e);
      });
      client.on('data', this.dataHandler);
      client.on('data', function(data) {
        return _this.emit('tcpMessage', data);
      });
      client.on('close', function() {
        return _this.emit('close');
      });
      return client.on('connection', function() {
        if (room) {
          _this.joinRoom(room);
        }
        _this.emit('connected');
        return _this.emit('tcpConnect', client);
      });
    };

    PlugAPI.prototype.dataHandler = function(data) {
      var msg, reply, _i, _len, _ref, _ref1, _ref2, _ref3;
      if (typeof data === 'string') {
        data = JSON.parse(data);
      }
      if (data.messages) {
        _ref = data.messages;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          msg = _ref[_i];
          this.messageHandler(msg);
        }
        return;
      }
      if (data.type === 'rpc') {
        reply = data.result;
        if (((_ref1 = data.result) != null ? _ref1.stacktrace : void 0)) {
          logger.log(data.result.stacktrace);
        }
        if (data.status !== 0) {
          reply = data;
        }
        if ((_ref2 = this.rpcHandlers[data.id]) != null) {
          if (typeof _ref2.callback === "function") {
            _ref2.callback(reply);
          }
        }
        this.parseRPCReply((_ref3 = this.rpcHandlers[data.id]) != null ? _ref3.type : void 0, reply);
        return delete this.rpcHandlers[data.id];
      }
    };

    PlugAPI.prototype.parseRPCReply = function(name, data) {
      switch (name) {
        case 'room.join':
          this.emit('roomChanged', data);
          this.userId = data.user.profile.id;
          this.roomId = data.room.id;
          return this.historyID = data.room.historyID;
      }
    };

    PlugAPI.prototype.messageHandler = function(msg) {
      switch (msg.type) {
        case 'ping':
          this.sendRPC('user.pong');
          break;
        case 'userJoin':
          this.room.addUser(msg.data);
          this.emit('registered', msg.data);
          this.emit('user_join', msg.data);
          break;
        case 'userLeave':
          this.room.remUser(msg.data.id);
          this.emit('registered', msg.data);
          this.emit('user_leave', msg.data);
          break;
        case 'chat':
          msg.data.message = encoder.htmlDecode(msg.data.message);
          this.emit('speak', msg.data);
          break;
        case 'voteUpdate':
          if (msg.data.vote === 1) {
            this.room.logVote(msg.data.id, 'woot');
          } else {
            this.room.logVote(msg.data.id, 'meh');
          }
          this.emit('update_votes', msg.data);
          break;
        case 'djUpdate':
          this.room.setDjs(msg.data);
          break;
        case 'djAdvance':
          this.room.setDjs(msg.data.djs);
          this.room.setMedia(msg.data.media);
          this.historyID = msg.data.historyID;
          this.emit('dj_advance', msg);
          break;
        case 'waitListUpdate':
          this.room.setWaitlist(msg.data);
          break;
        case 'curateUpdate':
          this.room.logVote(msg.data.id, 'curate');
          break;
        case void 0:
          logger.log('UNKNOWN MESSAGE FORMAT', msg);
      }
      if (msg.type) {
        return this.emit(msg.type, msg.data);
      }
    };

    PlugAPI.prototype.sendRPC = function(name, args, callback) {
      var rpcId, sendArgs;
      if (args === void 0) {
        args = [];
      }
      if (Object.prototype.toString.apply(args) !== "[object Array]") {
        args = [args];
      }
      rpcId = ++apiId;
      this.rpcHandlers[rpcId] = {
        callback: callback,
        type: name
      };
      sendArgs = {
        type: 'rpc',
        id: rpcId,
        name: name,
        args: args
      };
      return client.send(sendArgs);
    };

    PlugAPI.prototype.send = function(data) {
      return client.send(data);
    };

    PlugAPI.prototype.joinRoom = function(name, callback) {
      var _this = this;
      return this.sendRPC('room.join', [name], function(data) {
        return _this.initRoom(data, function() {
          if (callback != null) {
            return callback(data);
          }
        });
      });
    };

    PlugAPI.prototype.initRoom = function(data, callback) {
      this.room.reset();
      this.room.setUsers(data.room.users);
      this.room.setStaff(data.room.staff);
      this.room.setAdmins(data.room.admins);
      this.room.setOwner(data.room.owner);
      this.room.setSelf(data.user.profile);
      this.room.setWaitlist(data.room.waitList);
      this.room.setDjs(data.room.djs);
      this.room.setMedia(data.room.media, data.room.votes, data.room.curates);
      return callback();
    };

    PlugAPI.prototype.roomRegister = function(name, callback) {
      return this.joinRoom(name, callback);
    };

    PlugAPI.prototype.chat = function(msg) {
      return this.send({
        type: 'chat',
        msg: msg
      });
    };

    PlugAPI.prototype.speak = function(msg) {
      return this.chat(msg);
    };

    PlugAPI.prototype.sendChat = function(msg) {
      return this.chat(msg);
    };

    PlugAPI.prototype.upvote = function(callback) {
      this.sendRPC("room.cast", [true, this.historyID, this.lastHistoryID === this.historyID], callback);
      return this.lastHistoryID = this.historyID;
    };

    PlugAPI.prototype.downvote = function(callback) {
      this.sendRPC("room.cast", [false, this.historyID, this.lastHistoryID === this.historyID], callback);
      return this.lastHistoryID = this.historyID;
    };

    PlugAPI.prototype.woot = function(callback) {
      return this.upvote(callback);
    };

    PlugAPI.prototype.meh = function(callback) {
      return this.downvote(callback);
    };

    PlugAPI.prototype.vote = function(updown, callback) {
      if (updown.toLowerCase() === "up") {
        return this.upvote(callback);
      } else {
        return this.downvote(callback);
      }
    };

    PlugAPI.prototype.changeRoomInfo = function(name, description, callback) {
      var roomInfo;
      roomInfo = {
        name: name,
        description: description
      };
      return this.sendRPC("moderate.update", roomInfo, callback);
    };

    PlugAPI.prototype.changeRoomOptions = function(boothLocked, waitListEnabled, maxPlays, maxDJs, callback) {
      var options;
      if (!this.roomId) {
        throw new Error('You must be in a room to change its options');
      }
      options = {
        boothLocked: boothLocked,
        waitListEnabled: waitListEnabled,
        maxPlays: maxPlays,
        maxDJs: maxDJs
      };
      return this.sendRPC("room.update_options", [this.roomId, options], callback);
    };

    PlugAPI.prototype.joinBooth = function(callback) {
      return this.sendRPC("booth.join", [], callback);
    };

    PlugAPI.prototype.leaveBooth = function(callback) {
      return this.sendRPC("booth.leave", [], callback);
    };

    PlugAPI.prototype.removeDj = function(userid, callback) {
      return this.sendRPC("moderate.remove_dj", userid, callback);
    };

    PlugAPI.prototype.moderateRemoveDJ = function(userid) {
      return this.removeDj(userid);
    };

    PlugAPI.prototype.moderateAddDJ = function(userid, callback) {
      return this.sendRPC("moderate.add_dj", userid, callback);
    };

    PlugAPI.prototype.addDj = function(callback) {
      return this.joinBooth(callback);
    };

    PlugAPI.prototype.remDj = function(userid, callback) {
      if (userid && userid === this.userid) {
        return this.leaveBooth(callback);
      } else {
        return this.removeDj(userid, callback);
      }
    };

    PlugAPI.prototype.moderateKickUser = function(id, reason, callback) {
      return this.sendRPC("moderate.kick", [id, reason, 60], callback);
    };

    PlugAPI.prototype.waitListJoin = function() {
      return this.joinBooth();
    };

    PlugAPI.prototype.waitListLeave = function() {
      return this.leaveBooth();
    };

    PlugAPI.prototype.skipSong = function(callback) {
      return this.sendRPC("moderate.skip", this.historyID, callback);
    };

    PlugAPI.prototype.moderateForceSkip = function() {
      return this.skipSong();
    };

    PlugAPI.prototype.getUsers = function() {
      return this.room.getUsers();
    };

    PlugAPI.prototype.getUser = function(userid) {
      return this.room.getUser(userid);
    };

    PlugAPI.prototype.getAudience = function() {
      return this.room.getAudience();
    };

    PlugAPI.prototype.getDJs = function() {
      return this.room.getDjs();
    };

    PlugAPI.prototype.getStaff = function() {
      return this.room.getStaff();
    };

    PlugAPI.prototype.getAdmins = function() {
      return this.room.getAdmins();
    };

    PlugAPI.prototype.getHost = function() {
      return this.room.getHost();
    };

    PlugAPI.prototype.getSelf = function() {
      return this.room.getSelf();
    };

    PlugAPI.prototype.getWaitList = function() {
      return this.room.getWaitlist();
    };

    PlugAPI.prototype.getAmbassadors = function() {
      return this.room.getAmbassadors();
    };

    PlugAPI.prototype.getMedia = function() {
      return this.room.getMedia();
    };

    PlugAPI.prototype.getRoomScore = function() {
      return this.room.getRoomScore();
    };

    return PlugAPI;

  })(EventEmitter);

  module.exports = PlugAPI;

}).call(this);
